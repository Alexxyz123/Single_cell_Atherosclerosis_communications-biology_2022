setwd("./CellType")
setwd("~/single-cell/data")
setwd("./CellType")
library(Seurat)
library(RColorBrewer)
###加载颜色#####
color=brewer.pal(9,"Reds")
color
pie(rep(1,9),col = color,labels = color)
#####SMC cell marker####
#save(scRNA,file = "scRNA_cellmarker.RData")
scRNA <- get(load("scRNA_celltype.Rdata"))
FeaturePlot(scRNA,
features = c("GAS5"),reduction = "umap",
cols = c("grey","#EF3B2C","firebrick3"))+ guides(color=F)
scRNA["GAS5",]
a <- scRNA %>% as.data.frame()
library(tidyverse)
a <- scRNA %>% as.data.frame()
a <- scRNA["PVT1",]
View(a)
a@assays$RNA
a <- a@assays$integrated
df1=FetchData(scRNA, vars=c("GAS5", "PVT1"))
View(df1)
View(df1)
FeaturePlot(scRNA,
features = c("PVT1"),reduction = "umap",
cols = c("grey","#EF3B2C","firebrick3"))+ guides(color=F)
##细胞鉴定和可视化####
##加载包
library(Seurat)
library(tidyverse)
library(patchwork)
library(SingleR)
library(scCATCH)
library(RColorBrewer)
#加载数据
setwd("/home/data/ssy008/single-cell/data")
load(""scRNA_celltype.Rdata"")
load(""scRNA_celltype.Rdata"")
load("scRNA_celltype.Rdata")
load("CellType/scRNA_celltype.Rdata")
pheno <- scRNA$celltype
pheno <- scRNA$celltype %>% as.data.frame()
View(pheno)
pheno <- scRNA$celltype %>% as.data.frame() %>% rownames_to_column(var = "ID") %>% rename(celltype=".")
pheno <- scRNA$celltype %>% as.data.frame() %>% rownames_to_column(var = "ID") %>% rename("celltype"=".")
pheno <- scRNA$celltype %>% as.data.frame() %>% rownames_to_column(var = "ID") %>% rename("."="celltype")
#获取count，未log化的数值
df <- as.data.frame(GetAssayData(scRNA, assay = "RNA", slot = "counts"))#获取标准化后表达矩阵数据
identical(colnames(df),pheno$ID)#判断顺序
table(pheno$celltype)
#获取myeloid亚群
load("Subset_Myeloid/scRNAsub_classify.Rdata")
pheno_myloid <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
View(pheno_myloid)
pheno_myloid$celltype <-paste0(pheno_myloid$celltype,"macrophage")
#获取VSMC亚群
load("~/single-cell/data/Subset_VSMC/scRNAsub_classify.Rdata")
pheno_VSMC <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
View(pheno_VSMC)
pheno_VSMC$celltype <-paste0(pheno_VSMC$celltype,"VSMC")
View(pheno_VSMC)
View(pheno_myloid)
#获取myeloid亚群
load("Subset_Myeloid/scRNAsub_classify.Rdata")
pheno_myloid <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_myloid$celltype <-paste0(pheno_myloid$celltype," macrophage")
#获取VSMC亚群
load("~/single-cell/data/Subset_VSMC/scRNAsub_classify.Rdata")
pheno_VSMC <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_VSMC$celltype <-paste0(pheno_VSMC$celltype," VSMC")
####进行合并
cell_ID <- setdiff(pheno$ID,c(pheno_myloid$ID,pheno_VSMC$ID))
length(scRNA$orig.ident)
####进行合并
cell_ID <- setdiff(pheno$ID,c(pheno_myloid$ID,pheno_VSMC$ID))
pheno_1 <- pheno[pheno$ID%in%cell_ID,]
pheno <- rbind(rbind(pheno_1,pheno_myloid),pheno_VSMC)
View(pheno)
table(pheno$celltype)
#获取count，未log化的数值
df <- as.data.frame(GetAssayData(scRNA, assay = "RNA", slot = "counts"))#获取标准化后表达矩阵数据
identical(colnames(df),pheno$ID)#判断顺序
pheno <- pheno %>% column_to_rownames(var = "ID")
View(pheno)
rownames(pheno) <- NULL
pheno <- pheno %>% column_to_rownames(var = "ID")
View(pheno)
pheno <- pheno[colnames(df),]
identical(colnames(df),names(pheno))#判断顺序
pheno <- rbind(rbind(pheno_1,pheno_myloid),pheno_VSMC)
View(pheno)
identical(colnames(df),pheno$ID)#判断顺序
rownames(pheno) <- NULL
pheno <- pheno %>% column_to_rownames(var = "ID")
View(pheno)
head(colnames(df))
pheno1 <- pheno[colnames(df),]
head(pheno1)
pheno1 <- pheno[colnames(df),] %>% as.data.frame()
View(pheno1)
View(pheno)
pheno <- t(pheno) %>% as.data.frame()
View(pheno)
pheno <- pheno[,colnames(df)s]
pheno <- pheno[,colnames(df)]
identical(colnames(df),colnames(pheno))#判断顺序
colnames(df) <- pheno[1,]#把细胞ID替换成亚群名称（有重复所以使用不了everything函数）
head(rownames(df))
x <- data.frame(GeneSymbol = rownames(df))
View(x)
rownames(df) <- NULL
final <- cbind(x,df)
View(final)
#保存结果
write.csv(final,"single_cell_ref.txt")
table(colnames(pheno))
setwd("/home/data/ssy008/single-cell/data")
#加载数据
load("CellType/scRNA_celltype.Rdata")
#获取表型数据
pheno <- scRNA$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
#获取myeloid亚群
load("Subset_Myeloid/scRNAsub_classify.Rdata")
pheno_myloid <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_myloid$celltype <-paste0(pheno_myloid$celltype," macrophage")
#获取VSMC亚群
load("~/single-cell/data/Subset_VSMC/scRNAsub_classify.Rdata")
pheno_VSMC <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_VSMC$celltype <-paste0(pheno_VSMC$celltype," VSMC")
####进行合并
cell_ID <- setdiff(pheno$ID,c(pheno_myloid$ID,pheno_VSMC$ID))
pheno_1 <- pheno[pheno$ID%in%cell_ID,]
pheno <- rbind(rbind(pheno_1,pheno_myloid),pheno_VSMC)
table(pheno$celltype)
#获取count，未log化的数值
df <- as.data.frame(GetAssayData(scRNA, assay = "RNA", slot = "counts"))#获取标准化后表达矩阵数据
identical(colnames(df),pheno$ID)#判断顺序
View(pheno)
table(pheno$celltype)
#筛选免疫细胞
immune_cell <- c("T Cells","TREM2-high macrophage",
"Inflammatory macrophage",
"Resident-like macrophage",
"TREM2-high macrophage","Dendritic Cells",
"NK Cells","B Cells")
pheno <- pheno[,pheno$celltype%in%immune_cell]
pheno <- pheno[pheno$celltype%in%immune_cell,]
View(pheno)
##提取df中的免疫细胞
df <- df[,pheno$ID]
identical(colnames(df),colnames(pheno))#判断顺序
pheno <- t(pheno) %>% as.data.frame()
pheno <- pheno[,colnames(df)]
View(pheno)
setwd("/home/data/ssy008/single-cell/data")
#加载数据
load("CellType/scRNA_celltype.Rdata")
#获取表型数据
pheno <- scRNA$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
#获取myeloid亚群
load("Subset_Myeloid/scRNAsub_classify.Rdata")
pheno_myloid <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_myloid$celltype <-paste0(pheno_myloid$celltype," macrophage")
#获取VSMC亚群
load("~/single-cell/data/Subset_VSMC/scRNAsub_classify.Rdata")
pheno_VSMC <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_VSMC$celltype <-paste0(pheno_VSMC$celltype," VSMC")
####进行合并
cell_ID <- setdiff(pheno$ID,c(pheno_myloid$ID,pheno_VSMC$ID))
pheno_1 <- pheno[pheno$ID%in%cell_ID,]
pheno <- rbind(rbind(pheno_1,pheno_myloid),pheno_VSMC)
table(pheno$celltype)
#获取count，未log化的数值
df <- as.data.frame(GetAssayData(scRNA, assay = "RNA", slot = "counts"))#获取标准化后表达矩阵数据
identical(colnames(df),pheno$ID)#判断顺序
#筛选免疫细胞
immune_cell <- c("T Cells","TREM2-high macrophage",
"Inflammatory macrophage",
"Resident-like macrophage",
"TREM2-high macrophage","Dendritic Cells",
"NK Cells","B Cells")
pheno <- pheno[pheno$celltype%in%immune_cell,]
##提取df中的免疫细胞
df <- df[,pheno$ID]
pheno <- pheno %>% column_to_rownames(var = "ID") %>%
t() %>% as.data.frame()
pheno <- pheno[,colnames(df)]
View(pheno)
rownames(pheno) <- NULL
pheno <- pheno %>% column_to_rownames(var = "ID") %>%
t() %>% as.data.frame()
pheno <- pheno[,colnames(df)]
identical(colnames(df),colnames(pheno))#判断顺序
colnames(df) <- pheno[1,]#把细胞ID替换成亚群名称（有重复所以使用不了everything函数）
x <- data.frame(GeneSymbol = rownames(df))
rownames(df) <- NULL
final <- cbind(x,df)
#保存结果
write.csv(final,"single_cell_ref.txt")
#筛选免疫细胞
immune_cell <- c("T Cells","TREM2-high macrophage",
"Inflammatory macrophage",
"Resident-like macrophage",
"TREM2-high macrophage",
"NK Cells","B Cells")
setwd("/home/data/ssy008/single-cell/data")
#加载数据
load("CellType/scRNA_celltype.Rdata")
#获取表型数据
pheno <- scRNA$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
#获取myeloid亚群
load("Subset_Myeloid/scRNAsub_classify.Rdata")
pheno_myloid <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_myloid$celltype <-paste0(pheno_myloid$celltype," macrophage")
#获取VSMC亚群
load("~/single-cell/data/Subset_VSMC/scRNAsub_classify.Rdata")
pheno_VSMC <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_VSMC$celltype <-paste0(pheno_VSMC$celltype," VSMC")
####进行合并
cell_ID <- setdiff(pheno$ID,c(pheno_myloid$ID,pheno_VSMC$ID))
pheno_1 <- pheno[pheno$ID%in%cell_ID,]
pheno <- rbind(rbind(pheno_1,pheno_myloid),pheno_VSMC)
table(pheno$celltype)
#获取count，未log化的数值
df <- as.data.frame(GetAssayData(scRNA, assay = "RNA", slot = "counts"))#获取标准化后表达矩阵数据
identical(colnames(df),pheno$ID)#判断顺序
#筛选免疫细胞
immune_cell <- c("T Cells","TREM2-high macrophage",
"Inflammatory macrophage",
"Resident-like macrophage",
"TREM2-high macrophage",
"NK Cells","B Cells")
pheno <- pheno[pheno$celltype%in%immune_cell,]
##提取df中的免疫细胞
df <- df[,pheno$ID]
rownames(pheno) <- NULL
pheno <- pheno %>% column_to_rownames(var = "ID") %>%
t() %>% as.data.frame()
pheno <- pheno[,colnames(df)]
identical(colnames(df),colnames(pheno))#判断顺序
colnames(df) <- pheno[1,]#把细胞ID替换成亚群名称（有重复所以使用不了everything函数）
x <- data.frame(GeneSymbol = rownames(df))
rownames(df) <- NULL
final <- cbind(x,df)
#保存结果
write.csv(final,"single_cell_ref.txt")
setwd("/home/data/ssy008/single-cell/data")
#加载数据
load("CellType/scRNA_celltype.Rdata")
#获取表型数据
pheno <- scRNA$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
#获取myeloid亚群
load("Subset_Myeloid/scRNAsub_classify.Rdata")
pheno_myloid <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_myloid$celltype <-paste0(pheno_myloid$celltype," macrophage")
#获取VSMC亚群
load("~/single-cell/data/Subset_VSMC/scRNAsub_classify.Rdata")
pheno_VSMC <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_VSMC$celltype <-paste0(pheno_VSMC$celltype," VSMC")
####进行合并
cell_ID <- setdiff(pheno$ID,c(pheno_myloid$ID,pheno_VSMC$ID))
pheno_1 <- pheno[pheno$ID%in%cell_ID,]
pheno <- rbind(rbind(pheno_1,pheno_myloid),pheno_VSMC)
table(pheno$celltype)
#获取count，未log化的数值
df <- as.data.frame(GetAssayData(scRNA, assay = "RNA", slot = "counts"))#获取标准化后表达矩阵数据
identical(colnames(df),pheno$ID)#判断顺序
#筛选免疫细胞
immune_cell <- c("T Cells","TREM2-high macrophage",
"Inflammatory macrophage",
"Resident-like macrophage",
"TREM2-high macrophage","B Cells")
pheno <- pheno[pheno$celltype%in%immune_cell,]
##提取df中的免疫细胞
df <- df[,pheno$ID]
rownames(pheno) <- NULL
pheno <- pheno %>% column_to_rownames(var = "ID") %>%
t() %>% as.data.frame()
pheno <- pheno[,colnames(df)]
identical(colnames(df),colnames(pheno))#判断顺序
colnames(df) <- pheno[1,]#把细胞ID替换成亚群名称（有重复所以使用不了everything函数）
x <- data.frame(GeneSymbol = rownames(df))
rownames(df) <- NULL
final <- cbind(x,df)
#保存结果
write.csv(final,"single_cell_ref.txt")
setwd("/home/data/ssy008/single-cell/data")
#加载数据
load("CellType/scRNA_celltype.Rdata")
#获取表型数据
pheno <- scRNA$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
#获取myeloid亚群
load("Subset_Myeloid/scRNAsub_classify.Rdata")
pheno_myloid <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_myloid$celltype <-paste0(pheno_myloid$celltype," macrophage")
#获取VSMC亚群
load("~/single-cell/data/Subset_VSMC/scRNAsub_classify.Rdata")
pheno_VSMC <- scRNAsub$celltype %>% as.data.frame() %>%
rownames_to_column(var = "ID") %>% rename("."="celltype")
pheno_VSMC$celltype <-paste0(pheno_VSMC$celltype," VSMC")
####进行合并
cell_ID <- setdiff(pheno$ID,c(pheno_myloid$ID,pheno_VSMC$ID))
pheno_1 <- pheno[pheno$ID%in%cell_ID,]
pheno <- rbind(rbind(pheno_1,pheno_myloid),pheno_VSMC)
table(pheno$celltype)
#获取count，未log化的数值
df <- as.data.frame(GetAssayData(scRNA, assay = "RNA", slot = "counts"))#获取标准化后表达矩阵数据
identical(colnames(df),pheno$ID)#判断顺序
###随机提取20000个细胞
sample_ID <- sample(pheno$ID,20000,replace=FALSE)
pheno <- pheno[pheno$ID%in%sample_ID,]
#查看一下
table(pheno$celltype)
##提取df中的免疫细胞
df <- df[,pheno$ID]
rownames(pheno) <- NULL
pheno <- pheno %>% column_to_rownames(var = "ID") %>%
t() %>% as.data.frame()
pheno <- pheno[,colnames(df)]
identical(colnames(df),colnames(pheno))#判断顺序
colnames(df) <- pheno[1,]#把细胞ID替换成亚群名称（有重复所以使用不了everything函数）
x <- data.frame(GeneSymbol = rownames(df))
rownames(df) <- NULL
final <- cbind(x,df)
#保存结果
write.csv(final,"single_cell_ref.txt")
#保存结果
write.csv(final,"single_cell_ref.txt",row.names = F)
#保存结果
write.table(final,
"single_cell_ref.txt",quote = F, sep = "\t", row.names=FALSE)
setwd("~/single-cell/data/Subset_VSMC/dorothea")
summarized_viper_scores_df <- read.csv("Figure4A_summarized_viper_scores_df.csv")
setwd("~/single-cell/data/Subset_VSMC")
summarized_viper_scores_df <- read.csv("Figure4A_summarized_viper_scores_df.csv")
#pheatmap
palette_length = 100
my_color = colorRampPalette(c("darkblue", "white","red"))(palette_length)
my_breaks <- c(seq(min(summarized_viper_scores_df), 0,
length.out=ceiling(palette_length/2) + 1),
seq(max(summarized_viper_scores_df)/palette_length,
max(summarized_viper_scores_df),
length.out=floor(palette_length/2)))
library(tidyr)
library(pheatmap)
library(tibble)
library(dplyr)
library(ggplot2)
View(summarized_viper_scores_df)
summarized_viper_scores_df <- read.csv("Figure4A_summarized_viper_scores_df.csv") %>%
column_to_rownames(var = "ID")
my_breaks <- c(seq(min(summarized_viper_scores_df), 0,
length.out=ceiling(palette_length/2) + 1),
seq(max(summarized_viper_scores_df)/palette_length,
max(summarized_viper_scores_df),
length.out=floor(palette_length/2)))
names <- c("Macrophage-like","Contractile","Fibroblast-like","Chondrocyte-like")
pheatmap(t(summarized_viper_scores_df)[,names],fontsize=10,
fontsize_row = 5,
color=my_color, breaks = my_breaks,
angle_col = 45,
treeheight_col = 0,  border_color = NA)
View(summarized_viper_scores_df)
colnames(summarized_viper_scores) <- c("Chondrocyte-like",
"Contractile","Fibroblast-like",
"Macrophage-like"
)
colnames(summarized_viper_scores_df) <- c("Chondrocyte-like",
"Contractile","Fibroblast-like",
"Macrophage-like"
)
names <- c("Macrophage-like","Contractile","Fibroblast-like","Chondrocyte-like")
pheatmap(t(summarized_viper_scores_df)[,names],fontsize=10,
fontsize_row = 5,
color=my_color, breaks = my_breaks,
angle_col = 45,
treeheight_col = 0,  border_color = NA)
pheatmap(t(summarized_viper_scores_df[,names]),fontsize=10,
fontsize_row = 5,
color=my_color, breaks = my_breaks,
angle_col = 45,
treeheight_col = 0,  border_color = NA)
pheatmap(summarized_viper_scores_df[,names],fontsize=10,
fontsize_row = 5,
color=my_color, breaks = my_breaks,
angle_col = 45,
treeheight_col = 0,  border_color = NA)
getwd()
setwd("~/single-cell/data")
